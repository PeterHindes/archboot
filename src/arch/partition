#!/bin/bash

#                         PARTITIONING SCHEME
# ============================================================================
# Here we listing existing disk and partitions to select wich one to use,
# to format it and to create required partitions.
#
#     Required partitions:
#
#     SYSTEM......: /mnt
#     BOOT........: /mnt/boot
#     SWAP........: no mountpoint
#     HOME........: /mnt/home
#
# We use <partprobe> to inform system changes and
# add <sleep 2s> to prevent unreconized system changes.
# Since v2.8.1 custom partitioning is available, only mountpoints will be
# asked to the user (requires properly created and formated partitions).
# All steps are described in the official documentation:
# https://wiki.archlinux.org/index.php/Partitioning
# ============================================================================

_default_partitioning_scheme() {

    _info "Listing disk and partitions"

    # Select disk to use
    until [[ ${DISK} =~ ^(sd|hd|nvme0n)[a-z0-9]{1}$ ]]; do
        fdisk -l
        _prompt "Enter disk to use:" "(e.g., sda, nvme0n1)"
        read -r DISK
    done
    export $DISK

    # Define partition order
    if [[ ${DISK} =~ "nvme0n" ]]; then
        export PART_ORDER=(0 p1 p2 p3 p4)
    else
        export PART_ORDER=(0 1 2 3 4)
    fi

    # Create MBR or GPT Table
    fdisk -l /dev/${DISK}
    _note "WARNING: this will erase the entire drive!"
    _confirm "Setting ${PART_TABLE} partition table on /dev/${DISK}?"
    case ${CONFIRM} in
        y|Y|yes|Yes|YES)
            wipefs -fa /dev/${DISK}
            printf ${PART_CODE}"\nw" | fdisk /dev/${DISK}
            partprobe /dev/${DISK}
            ;;
        *)
            _error "installation aborted by user!"
            ;;
    esac
    unset CONFIRM

    # Get BOOT partition size
    until [[ ${BOOT_SIZE} =~ ^[0-9]{1,+}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 512M)"
        _prompt "Boot partition size:"
        read -r BOOT_SIZE
    done

    # Create BOOT partition
    _info "Creating boot partition (${BOOT_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${BOOT_SIZE}\nw" | fdisk /dev/${DISK}
    partprobe /dev/${DISK} && sleep 2s
    yes | _check mkfs.${BOOT_FILESYSTEM} /dev/${DISK}${PART_ORDER[1]}

    # Get SWAP partition size
    until [[ ${SWAP_SIZE} =~ ^[0-9]{1,+}(M|G){1}+$ ]]; do
        _note "partition size {M,G} (e.g., 2G)"
        _prompt "Swap partition size:"
        read -r SWAP_SIZE
    done
    export BOOT_MOUNTPOINT="/dev/${DISK}${PART_ORDER[1]}"

    # Create SWAP partition
    _info "Creating swap partition (${SWAP_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${SWAP_SIZE}\nw" | fdisk /dev/${DISK}
    partprobe /dev/${DISK} && sleep 2s
    yes | _check mkswap /dev/${DISK}${PART_ORDER[2]}
    export SWAP_MOUNTPOINT="/dev/${DISK}${PART_ORDER[2]}"

    # Get SYSTEM partiton size
    until [[ ${SYSTEM_SIZE} =~ ^[0-9]{1,+}(G|T|P){1}+$ ]]; do
        _note "partition size {G,T,P} (e.g., 25G)"
        _prompt "System partition size:"
        read -r SYSTEM_SIZE
    done

    # Create SYSTEM partition
    _info "Creating system partition (${SYSTEM_SIZE})"
    printf "n\n${PART_TYPE}\n\n+${SYSTEM_SIZE}\nw" | fdisk /dev/${DISK}
    partprobe /dev/${DISK} && sleep 2s
    yes | _check mkfs.ext4 /dev/${DISK}${PART_ORDER[3]}
    export SYSTEM_MOUNTPOINT="/dev/${DISK}${PART_ORDER[3]}"

    # HOME partition
    if [[ ${FIRMWARE} == "UEFI" ]]; then
        _confirm "Do you wish to use free space for home?"
        case ${CONFIRM} in
            y|Y|yes|Yes|YES)

                # Create HOME partition
                _info "Creating home partition (free space)"
                printf "n\n${PART_TYPE}\n\nw" | fdisk /dev/${DISK}
                ;;
            *)
                # Get HOME partiton size
                until [[ ${HOME_SIZE} =~ ^[0-9]{1,+}(G|T|P){1}+$ ]]; do
                    _note "partition size {G,T,P} (e.g., 100G)"
                    _prompt "Home partition size:"
                    read -r HOME_SIZE
                done

                # Create HOME partition
                _info "Creating home partition (${HOME_SIZE})"
                printf "n\n\n\n+${HOME_SIZE}\nw" | fdisk /dev/${DISK}
                ;;
        esac
        unset CONFIRM
    else
        # Create HOME partition
        _info "Creating home partition (free space)"
        printf "n\n${PART_TYPE}\n\nw" | fdisk /dev/${DISK}
    fi
    partprobe /dev/${DISK} && sleep 2s
    yes | _check mkfs.ext4 /dev/${DISK}${PART_ORDER[4]}
    export HOME_MOUNTPOINT="/dev/${DISK}${PART_ORDER[4]}"
}

_custom_partitioning_scheme() {

    _info "Listing disk and partitions"

    # Select boot
    until [[ ${BOOT_MOUNTPOINT} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,+}$ ]]; do
        fdisk -l
        _prompt "Enter boot mountpoint:" "(e.g., sda2, nvme0n1p2)"
        read -r BOOT_MOUNTPOINT
    done
    export BOOT_MOUNTPOINT="/dev/${BOOT_MOUNTPOINT}"

    # Define disk
    if [[ ${BOOT_MOUNTPOINT} =~ "/dev/nvme0n" ]]; then
        export DISK=${BOOT_MOUNTPOINT%p*}
    else
        export DISK=${BOOT_MOUNTPOINT//[0-9]}
    fi

    # Select swap
    until [[ ${SWAP_MOUNTPOINT} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,+}$ ]]; do
        fdisk -l
        _prompt "Enter swap mountpoint:" "(e.g., sda3, nvme0n1p3)"
        read -r SWAP_MOUNTPOINT
    done
    export SWAP_MOUNTPOINT="/dev/${SWAP_MOUNTPOINT}"

    # Select system
    until [[ ${SYSTEM_MOUNTPOINT} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,+}$ ]]; do
        fdisk -l
        _prompt "Enter system mountpoint:" "(e.g., sda1, nvme0n1p1)"
        read -r SYSTEM_MOUNTPOINT
    done
    export SYSTEM_MOUNTPOINT="/dev/${SYSTEM_MOUNTPOINT}"

    # Select home
    until [[ ${HOME_MOUNTPOINT} =~ ^(sd|hd|nvme0n)[a-z0-9]{1,+}$ ]]; do
        fdisk -l
        _prompt "Enter home mountpoint:" "(e.g., sda4, nvme0n1p4)"
        read -r HOME_MOUNTPOINT
    done
    export HOME_MOUNTPOINT="/dev/${HOME_MOUNTPOINT}"
}

# archboot by grm34 under Apache License 2.0
# ============================================================================
